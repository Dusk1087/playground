n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
reorder(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
reorder(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
reorder(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
rearrange(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
relocate(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
relocate(origin,carrier)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
relocate(carrier, origin)
#Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights |>
group_by(carrier, origin) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE),
n=n()
)  |>
slice_max(delay, n=1, with_ties = FALSE) |>
relocate(origin, carrier)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(
destination)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(
dest)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay) |>
relocate(dest)
source("~/r_repository/data_transformation.r", echo=TRUE)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay) |>
relocate(dest, flights)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay) |>
relocate(dest, flights)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay) |>
relocate(dest, flight)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, 2) |>
relocate(dest, flight)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, n = 2) |>
relocate(dest, flight)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, n = 5) |>
relocate(dest, flight)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, n = 25) |>
relocate(dest, flight)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, n = 25) |>
relocate(dest, flight,dep_delay)
#find the flights that are most delayed upon departure from each destination
flights |>
group_by(dest) |>
slice_max(dep_delay, n = 2) |>
relocate(dest, flight,dep_delay)
#How do delays vary over the course of the day? Illustrate your answer with a plot.
flights |>
ggplot(mapping = aes(x = dep_time), y = dep_delay) +
geom+barplot()
#How do delays vary over the course of the day? Illustrate your answer with a plot.
flights |>
ggplot(mapping = aes(x = dep_time), y = dep_delay) +
geom_bar()
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
delays_by_hour |>
ggplot(aes(x = hour), y = delay) +
geom_bar()
delays_by_hour |>
ggplot(aes(x = hour), y = delay) +
geom_line()
delays_by_hour |>
ggplot(aes(x = hour), y = delay) +
geom_line()
delays_by_hour |>
ggplot(aes(x = hour), y = delay) +
geom_point()
ggplot(aes(x = hour, y = delay) +
delays_by_hour |>
ggplot(aes(x = hour, y = delay) +
geom_point()
)
source("~/r_repository/data_transformation.r", echo=TRUE)
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point()
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point()
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point()
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point()+
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
)
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
geom_line() +
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
geom_smooth() +
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE) +
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
#How do delays vary over the course of the day? Illustrate your answer with a plot.
delays_by_hour <- flights |>
group_by(hour) |>
summarize(
delay = mean(dep_delay, na.rm = TRUE)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
geom_smooth(na.rm = TRUE) +
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
delays_by_hour |>
ggplot(aes(x = hour, y = delay)) +
geom_point(na.rm = TRUE)+
geom_line(na.rm = TRUE) +
labs(
title = "Average flight delay per hour",
x = "hour of the day",
y = "average delay (min)"
) +
theme(
plot.title = element_text(hjust =.5)
)
#What happens if you supply a negative n to slice_min() and friends?
friends
install.packages("friends")
#What happens if you supply a negative n to slice_min() and friends?
friends
library(friends)
#What happens if you supply a negative n to slice_min() and friends?
friends
#What happens if you supply a negative n to slice_min() and friends?
friends |>
slice_min()
#What happens if you supply a negative n to slice_min() and friends?
friends |>
slice_min(age, n = -1)
#What happens if you supply a negative n to slice_min() and friends?
friends |>
slice_min(age, n = 1)
#What happens if you supply a negative n to slice_min() and friends?
friends <- friends |>
slice_min(age, n = 1)
#What happens if you supply a negative n to slice_min() and friends?
friends <- friends
View(friends)
friends |>
group_by(speaker)
friends |>
group_by(speaker) |>
slice_min(speaker, n = 1)
#What happens if you supply a negative n to slice_min() and friends?
friends |>
group_by(speaker) |>
slice_min(speaker, n = -1)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(carriers, 1)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(carriers, 1)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(carriers, n = 1)
view(flights)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(carrier, n = 1)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(carrier, n = 1) |>
relocate(carrier)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(dep_delay, n = 1) |>
relocate(carrier)
#What happens if you supply a negative n to slice_min() and friends?
flights |>
slice_min(dep_delay, n = -1) |>
relocate(carrier)
rm(friends)
#Explain what count() does in terms of the dplyr verbs you just learned.
#What does the sort argument to count() do?
#Equivalent of count
flights |>
group_by(carrier) |>
summarize(n=n())
#Alternatively, using the count() function
flights |>
count()
#Alternatively, using the count() function
flights |>
count(carrier)
df <- tibble(
x = 1:5,
y = c("a", "b", "a", "a", "b"),
z = c("K", "K", "L", "L", "K")
)
View(df)
df |>
group_by(y)
df |>
group_by(y) |>
arrange(y)
df |>
group_by(y) |>
summarize(mean = mean(x))
summarize(mean = mean(x), n= n()
df |>
df |>
group_by(y) |>
summarize(mean = mean(x),
n = n()
)
df |>
group_by(y) |>
slice_max(x, n=1) |>
summarize(mean = mean(x),
n = n()
)
1+3+4
8/3
df |>
group_by(z) |>
slice_max(x, n=1) |>
summarize(mean = mean(x),
n = n()
)
df |>
group_by(y, z) |>
summarize(mean_x = mean(x), .groups = "drop")
df |>
group_by(y, z) |>
summarize(count(x), .groups = "drop")
df |>
group_by(y, z) |>
summarize(count = n()), .groups = "drop")
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop")
df |>
group_by(z) |>
slice_max(x, n=1) |>
summarize(mean = mean(x),
n = n()
)
df |>
group_by(z) |>
slice_min(x, n=1) |>
summarize(mean = mean(x),
n = n()
)
df |>
group_by(z) |>
# slice_min(x, n=1) |>
summarize(mean = mean(x),
n = n()
)
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop")
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop_last") |>
summarise(x=max(x),.group = 'drop')
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop_last") |>
summarise(maxx=max(x),.group = 'drop')
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop_last") |>
summarise(maxx=max(x),.group = 'drop')
df |>
group_by(y, z) |>
summarize(count = n(), .groups = "drop_last") |>
summarise(maxx=max(count),.group = 'drop')
df |>
group_by(y, z) |>
summarize(mean_x = mean(x))
df |>
group_by(y, z) |>
mutate(mean_x = mean(x))
install.packages("Lahman")
library(Lahman)
batters <- Lahman::Batting
View(batters)
View(batters)
batters <- Lahman::Batting |>
group_by(playerID) |>
summarize(performance = sum(H, na.rm=TRUE) / sum(AB, na.rm = TRUE),
n = sum(AB, na.rm = TRUE)
)
batters
batters_original <- Lahman::Batting
batters <- Lahman::Batting |>
group_by(playerID) |>
summarize(performance = sum(H, na.rm=TRUE) / sum(AB, na.rm = TRUE),
n = sum(AB, na.rm = TRUE)
)
batters
value <- 0.12345
formatted_value <- sprintf("%.2f%%", value * 100)
print(formatted_value)
batters |>
ggplot(aes(x = performance, y = n)) +
geom_point()
batters |>
ggplot(aes(x = n, y = performance)) +
geom_point()
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point()
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point() +
geom_smooth()
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point() +
geom_smooth(se = FALSE)
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point(alpha = 1 / 10) +
geom_smooth(se = FALSE)
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point(alpha = 1 / 100) +
geom_smooth(se = FALSE)
batters |>
filter(n > 100) |>
ggplot(aes(x = n, y = performance)) +
geom_point(alpha = .5) +
geom_smooth(se = FALSE)
